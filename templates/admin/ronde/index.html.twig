{% extends 'base.html.twig' %}
{% block title %}Gestion des rondes{% endblock %}

{# ------------------------------------------------------------------ #}
{% block stylesheets %}
    {{ parent() }}
    <style>
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(12px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .fade-in {
            animation: fadeIn 0.4s ease-out both;
        }

        .badge-user {
            background: linear-gradient(90deg, #0078D4, #0055A5);
            color: #fff;
            font-size: .75rem;
            border-radius: 0.4rem;
            padding: 0.25rem 0.5rem;
            margin: 0.15rem 0.25rem 0 0;
        }

        .card-rnde {
            transition: background 0.3s, box-shadow 0.3s;
            border-left: 5px solid #0078D4;
            border-radius: 1rem;
        }

        .card-rnde:hover {
            background-color: #f0f8ff;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);
        }

        .btn-check:checked + label {
            background-color: #0055A5;
            color: white;
        }

        .scroll-box {
            max-height: 250px;
            overflow-y: auto;
            border: 1px solid #dee2e6;
            border-radius: 0.5rem;
            padding: 0.5rem;
            background-color: #f9f9f9;
        }

        .checkbox-item:hover {
            background-color: #e9f5ff;
            border-radius: 0.4rem;
        }

        .toast-container {
            position: fixed;
            top: 1rem;
            right: 1rem;
            z-index: 1080;
        }

        @media (max-width: 767px) {
            .card-body.d-flex {
                flex-direction: column !important;
                align-items: flex-start !important;
            }
            .edit-btn, .delete-btn {
                margin-top: 0.5rem;
            }
        }

        .badge-unavailable{
            background: linear-gradient(90deg,#FF8C00,#FF6400);
            color:#fff;
        }
    </style>
{% endblock %}


{# ------------------------------------------------------------------ #}
{% block body %}
    <main class="container py-4 fade-in">

        <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center gap-3 mb-4">
            <h1 class="h4 fw-bold text-primary m-0">
                <i class="bi bi-shield-check me-2"></i> Gestion des rondes
            </h1>

            <div class="d-flex flex-column flex-sm-row gap-2">
                <a href="{{ path('admin_rondes_fill') }}" class="btn btn-outline-primary">
                    <i class="bi bi-lightning-charge me-1"></i> Remplissage auto
                </a>

                <button class="btn btn-primary" id="btnNew"
                        data-bs-toggle="modal" data-bs-target="#rondeModal">
                    <i class="bi bi-plus-circle me-1"></i> Nouvelle ronde
                </button>

                {# …dans la barre d’actions… #}
                <form action="{{ path('admin_rondes_reset') }}"
                      method="post"
                      class="d-inline">

                    <input type="hidden"
                           name="_token"
                           value="{{ csrf_token('reset-rondes') }}">

                    <button type="submit"
                            class="btn btn-outline-danger"
                            onclick="return confirm('⚠ Cette action va supprimer toutes les rondes existantes puis recréer le planning par défaut. Continuer ?');">
                        <i class="bi bi-arrow-repeat me-1"></i> Réinitialiser les rondes
                    </button>
                </form>

            </div>
        </div>

        {# --------- messages flash Symfony --------- #}
        {% for msg in app.flashes('success') %}
            <div class="alert alert-success shadow-sm fade-in">{{ msg }}</div>
        {% endfor %}

        {# --------- regroupement par jour (Vendredi–Dimanche) --------- #}
        {% set libJours = {'Friday':'Vendredi','Saturday':'Samedi','Sunday':'Dimanche'} %}
        {% set grouped = {} %}
        {% for r in rondes %}
            {% set j = r.start|date('l') %}
            {% set grouped = grouped|merge({ (j): (grouped[j]|default([]))|merge([r]) }) %}
        {% endfor %}

        {% for jour, list in grouped %}
            <h5 class="text-uppercase fw-bold text-muted border-bottom pb-1 mb-3">
                <i class="bi bi-calendar-event me-1"></i>{{ libJours[jour]|default(jour) }}
            </h5>

            {% for r in list|sort((a,b)=>a.start <=> b.start) %}
                <div class="card card-rnde mb-3 shadow-sm border-0">
                    <div class="card-body d-flex flex-column flex-md-row justify-content-between align-items-md-center">
                        <div class="mb-2 mb-md-0">
                            <h6 class="mb-1 text-primary">
                                <i class="bi bi-clock me-1"></i>{{ r.start|date('H:i') }} → {{ r.end|date('H:i') }}
                            </h6>
                            {% set unavailableIds = unavailableMap[r.id]|default([]) %}
                            {% for u in r.sesUsers %}
                                {% set isUnavailable = u.id in unavailableIds %}
                                <span class="badge-user {{ isUnavailable ? 'badge-unavailable' }}"
                                      role="button"
                                      data-bs-toggle="modal"
                                      data-bs-target="#userModal"
                                      data-bs-title="{{ u.prenom }} {{ u.nom }}"
                                      data-nom="{{ u.prenom }} {{ u.nom }}"
                                      data-email="{{ u.email }}"
                                      data-tel="{{ u.telephone ?? 'Non renseigné' }}"
                                      data-bs-toggle="tooltip"
                                      data-bs-placement="top"
                                      title="Voir le contact"
                                      {% if isUnavailable %}aria-label="Créneau dans une indisponibilité"{% endif %}>
    {{ u.prenom }} {{ u.nom }}
</span>



                            {% endfor %}
                        </div>

                        <div>
                            <button class="btn btn-sm btn-outline-primary me-2 edit-btn"
                                    data-id="{{ r.id }}"
                                    data-start="{{ r.start|date('Y-m-d\\TH:i') }}"
                                    data-end="{{ r.end|date('Y-m-d\\TH:i') }}"
                                    data-users="{{ r.sesUsers|map(u=>u.id)|join(',') }}"
                                    data-bs-toggle="modal" data-bs-target="#rondeModal" title="Modifier">
                                <i class="bi bi-pencil"></i>
                            </button>

                            <form action="{{ path('admin_rondes_delete', {id:r.id}) }}" method="post" class="d-inline">
                                <input type="hidden" name="_token" value="{{ csrf_token('delete-ronde-'~r.id) }}">
                                <button class="btn btn-sm btn-outline-danger" onclick="return confirm('Supprimer ?')"
                                        title="Supprimer"><i class="bi bi-trash"></i></button>
                            </form>
                        </div>
                    </div>
                </div>
            {% endfor %}
        {% else %}
            <div class="alert alert-info text-center mt-4"><i class="bi bi-info-circle me-1"></i>Aucune ronde.</div>
        {% endfor %}
    </main>

    <div class="modal fade" id="userModal" tabindex="-1" aria-labelledby="userModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content border-primary shadow rounded-4">
                <div class="modal-header bg-primary text-white rounded-top-4">
                    <h5 class="modal-title" id="userModalLabel">
                        <i class="bi bi-person-lines-fill me-2"></i>Coordonnées du participant
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <p><i class="bi bi-person me-2 text-primary"></i><strong>Nom :</strong> <span id="userModalName"></span></p>
                    <p><i class="bi bi-envelope me-2 text-primary"></i><strong>Email :</strong> <a href="#" id="userModalEmail"></a></p>
                    <p><i class="bi bi-telephone me-2 text-primary"></i><strong>Téléphone :</strong> <a href="#" id="userModalTel"></a></p>
                </div>
            </div>
        </div>
    </div>



    {# =====================  MODAL  ===================== #}
    <div class="modal fade" id="rondeModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <form id="rondeForm">
                    <div class="modal-header">
                        <h5 class="modal-title" id="modalTitle">
                            <i class="bi bi-calendar-plus me-2 text-primary"></i> <span class="modal-title-text">Nouvelle ronde</span>
                        </h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>

                    <div class="modal-body">
                        <input type="hidden" name="id" id="rondeId">
                        <div class="row g-3">
                            <div class="col-md-6">
                                <label class="form-label">Début</label>
                                <input type="datetime-local" name="start" id="start" class="form-control" required>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Fin</label>
                                <input type="datetime-local" name="end" id="end" class="form-control" required>
                            </div>
                        </div>

                        <hr>
                        <label class="form-label fw-semibold">Utilisateurs</label>
                        <input type="text" id="userSearch" class="form-control form-control-sm mb-2"
                               placeholder="Filtrer…">

                        <div class="scroll-box" id="userList">
                            {# La liste sera chargée dynamiquement via AJAX selon le créneau choisi #}
                            <div class="text-muted small">Sélectionnez un créneau pour afficher les utilisateurs disponibles…</div>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                        <button class="btn btn-primary" type="submit">
                            <i class="bi bi-check-circle me-1"></i>Enregistrer
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    {# =====================  TOAST  ===================== #}
    <div class="toast-container">
        <div id="okToast" class="toast text-bg-success border-0" role="alert">
            <div class="d-flex">
                <div class="toast-body"><i class="bi bi-check-circle-fill me-2"></i>Opération réussie.</div>
                <button type="button" class="btn-close btn-close-white m-auto me-2" data-bs-dismiss="toast"></button>
            </div>
        </div>
    </div>
{% endblock %}

{# ------------------------------------------------------------------ #}
{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', () => {

            /* =================  ELEMENTS  ================ */
            const modalEl   = document.getElementById('rondeModal');
            const modal     = new bootstrap.Modal(modalEl);
            const form      = document.getElementById('rondeForm');
            const toast     = new bootstrap.Toast(document.getElementById('okToast'));
            const startInp  = document.getElementById('start');
            const endInp    = document.getElementById('end');
            const searchInp = document.getElementById('userSearch');
            const userList  = document.getElementById('userList');
            let cbItems     = userList.querySelectorAll('.checkbox-item');

            /* =================  AUTO +30min  ============== */
            startInp.addEventListener('change', () => {
                if(!startInp.value) return;
                const d = new Date(startInp.value); d.setMinutes(d.getMinutes()+30);
                const pad = n=>n.toString().padStart(2,'0');
                endInp.value=`${d.getFullYear()}-${pad(d.getMonth()+1)}-${pad(d.getDate())}T${pad(d.getHours())}:${pad(d.getMinutes())}`;
                refreshUserList();
            });
            endInp.addEventListener('change', refreshUserList);

            /* =================  FILTRE USERS   ============ */
            searchInp.addEventListener('input', () => {
                const term = searchInp.value.toLowerCase();
                cbItems.forEach(it=>{
                    it.style.display = it.dataset.search.includes(term)?'':'none';
                });
            });

            /* =========  CHARGE LISTE USERS DISPO ========= */
            async function refreshUserList(selectedIds = []){
                const start = startInp.value;
                const end   = endInp.value;
                if(!start || !end) return;

                userList.innerHTML = '<div class="text-center py-2"><div class="spinner-border spinner-border-sm" role="status"></div></div>';

                const url = '{{ path("admin_rondes_form") }}?start='+encodeURIComponent(start)+'&end='+encodeURIComponent(end);
                try{
                    const resp = await fetch(url,{headers:{'X-Requested-With':'XMLHttpRequest'}});
                    if(!resp.ok) throw new Error();
                    const html = await resp.text();
                    userList.innerHTML = html;
                    cbItems = userList.querySelectorAll('.checkbox-item');

                    // réapplique le filtre de recherche
                    searchInp.dispatchEvent(new Event('input'));

                    // re-check ids si besoin (édition)
                    if(selectedIds.length){
                        selectedIds.forEach(id=>{
                            const inp = userList.querySelector(`input[value="${id}"]`);
                            if(inp) inp.checked = true;
                        });
                    }

                }catch(e){
                    userList.innerHTML = '<div class="text-danger small">Erreur de chargement.</div>';
                }
            }

            /* =================  NOUVELLE RONDE  ============ */
            document.getElementById('btnNew').addEventListener('click',() => {
                form.reset();
                document.getElementById('rondeId').value='';
                document.getElementById('modalTitle').textContent='Nouvelle ronde';
                userList.innerHTML = '<div class="text-muted small">Sélectionnez un créneau pour afficher les utilisateurs disponibles…</div>';
                cbItems = userList.querySelectorAll('.checkbox-item');
            });

            /* =================  EDIT RONDE   ============== */
            document.querySelectorAll('.edit-btn').forEach(btn=>{
                btn.addEventListener('click',()=>{
                    form.reset();
                    document.getElementById('modalTitle').textContent='Modifier la ronde';
                    document.getElementById('rondeId').value=btn.dataset.id;
                    startInp.value=btn.dataset.start;
                    endInp.value  =btn.dataset.end;

                    const ids = btn.dataset.users.split(',');
                    // charge utilisateurs puis re-check ceux de la ronde
                    refreshUserList(ids);
                });
            });

            /* =================  SUBMIT AJAX  ============== */
            form.addEventListener('submit', async e=>{
                e.preventDefault();
                const fd = new FormData(form);
                const isEdit = fd.get('id')!=='';
                const url = isEdit
                    ? '{{ path("admin_rondes_ajax_update",{id:0}) }}'.replace('/0/','/'+fd.get('id')+'/')
                    : '{{ path("admin_rondes_ajax_create") }}';

                const resp = await fetch(url,{method:'POST',body:fd,headers:{'X-Requested-With':'XMLHttpRequest'}});
                if(resp.ok){
                    toast.show();
                    modal.hide();
                    setTimeout(()=>location.reload(),800);
                }else{
                    alert('Erreur serveur, vérifiez les champs.');
                }
            });

            // Initialisation tooltip (desktop)
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.forEach(el => new bootstrap.Tooltip(el));

// Modale contact utilisateur
            const userModal = document.getElementById('userModal');
            userModal.addEventListener('show.bs.modal', event => {
                const btn = event.relatedTarget;
                document.getElementById('userModalName').textContent = btn.dataset.nom;

                const email = btn.dataset.email;
                const tel = btn.dataset.tel;

                const emailLink = document.getElementById('userModalEmail');
                emailLink.textContent = email;
                emailLink.href = 'mailto:' + email;

                const telLink = document.getElementById('userModalTel');
                telLink.textContent = tel;
                telLink.href = 'tel:' + tel;
            });



        });
    </script>
{% endblock %}
